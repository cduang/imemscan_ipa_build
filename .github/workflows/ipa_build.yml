# iMemScan iOS应用构建工作流

name: 🚀 构建并发布iMemScan IPA (优化版)

# 定义工作流触发条件
on:
  # 仅允许在GitHub Actions页面手动触发工作流
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 1.0.0)'
        required: true
        default: 'auto'  # 添加默认值

# 设置工作流权限
permissions:
  contents: write  # 允许写入内容（创建release）
  packages: write  # 允许上传文件

# 定义构建配置
env:
  DESTINATION: 'generic/platform=iOS'  # 构建目标平台
  CONFIGURATION: 'Release'  # 构建配置
  SCHEME: 'iMemScan'  # 项目scheme
  LANGUAGE: 'zh-Hans'  # 设置为简体中文
  
jobs:
  build:
    name: 🏗️ 构建iMemScan IPA
    runs-on: macos-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: 🛠️ 设置Xcode环境
      uses: maxim-lobanov/setup-xcode@v1  # 不指定版本，使用默认最新版本
    
    - name: 安装依赖工具
      run: |
        # 安装 ldid 工具用于签名
        brew install ldid
        # 确认 ldid 已安装
        which ldid
    
    # 修改项目的默认语言设置
    - name: 修改项目默认语言
      run: |
        echo "修改项目默认开发区域为中文..."
        
        # 修改项目的developmentRegion为中文
        sed -i '' 's/developmentRegion = en;/developmentRegion = "zh-Hans";/g' iMemScan.xcodeproj/project.pbxproj
        
        # 确保中文在knownRegions列表的首位
        sed -i '' 's/knownRegions = (/knownRegions = (\n\t\t\t\t"zh-Hans",/g' iMemScan.xcodeproj/project.pbxproj
        
        # 检查修改结果
        grep -A 5 "developmentRegion" iMemScan.xcodeproj/project.pbxproj
        grep -A 5 "knownRegions" iMemScan.xcodeproj/project.pbxproj
    
    # 增强语言设置
    - name: 设置语言环境和本地化
      run: |
        # 设置应用显示名称和语言代码
        DISPLAY_NAME="内存扫描"
        DEV_LANGUAGE="zh-Hans"
        
        # 查看 Info.plist 初始内容
        echo "检查 Info.plist 初始内容："
        /usr/libexec/PlistBuddy -c "Print" "iMemScan/Info.plist"
        
        # 确保 CFBundleDisplayName 设置正确
        if ! /usr/libexec/PlistBuddy -c "Print :CFBundleDisplayName" "iMemScan/Info.plist" &>/dev/null; then
            /usr/libexec/PlistBuddy -c "Add :CFBundleDisplayName string $DISPLAY_NAME" "iMemScan/Info.plist"
        else
            /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName $DISPLAY_NAME" "iMemScan/Info.plist"
        fi
        
        # 设置开发语言为中文
        /usr/libexec/PlistBuddy -c "Set :CFBundleDevelopmentRegion $DEV_LANGUAGE" "iMemScan/Info.plist"
        
        # 确保本地化设置
        if ! /usr/libexec/PlistBuddy -c "Print :CFBundleLocalizations" "iMemScan/Info.plist" &>/dev/null; then
            /usr/libexec/PlistBuddy -c "Add :CFBundleLocalizations array" "iMemScan/Info.plist"
            /usr/libexec/PlistBuddy -c "Add :CFBundleLocalizations:0 string $DEV_LANGUAGE" "iMemScan/Info.plist"
        else
            # 清除现有本地化设置并重新添加中文
            /usr/libexec/PlistBuddy -c "Delete :CFBundleLocalizations" "iMemScan/Info.plist"
            /usr/libexec/PlistBuddy -c "Add :CFBundleLocalizations array" "iMemScan/Info.plist"
            /usr/libexec/PlistBuddy -c "Add :CFBundleLocalizations:0 string $DEV_LANGUAGE" "iMemScan/Info.plist"
        fi
        
        # 确保首选语言为中文
        if ! /usr/libexec/PlistBuddy -c "Print :CFBundlePrimaryLanguage" "iMemScan/Info.plist" &>/dev/null; then
            /usr/libexec/PlistBuddy -c "Add :CFBundlePrimaryLanguage string $DEV_LANGUAGE" "iMemScan/Info.plist"
        else
            /usr/libexec/PlistBuddy -c "Set :CFBundlePrimaryLanguage $DEV_LANGUAGE" "iMemScan/Info.plist"
        fi
        
        # 添加AppleLanguages设置，强制使用中文
        if ! /usr/libexec/PlistBuddy -c "Print :AppleLanguages" "iMemScan/Info.plist" &>/dev/null; then
            /usr/libexec/PlistBuddy -c "Add :AppleLanguages array" "iMemScan/Info.plist"
            /usr/libexec/PlistBuddy -c "Add :AppleLanguages:0 string $DEV_LANGUAGE" "iMemScan/Info.plist"
        else
            /usr/libexec/PlistBuddy -c "Delete :AppleLanguages" "iMemScan/Info.plist"
            /usr/libexec/PlistBuddy -c "Add :AppleLanguages array" "iMemScan/Info.plist"
            /usr/libexec/PlistBuddy -c "Add :AppleLanguages:0 string $DEV_LANGUAGE" "iMemScan/Info.plist"
        fi
        
        # 设置默认语言设置
        if ! /usr/libexec/PlistBuddy -c "Print :CFBundlePreferredLocalizations" "iMemScan/Info.plist" &>/dev/null; then
            /usr/libexec/PlistBuddy -c "Add :CFBundlePreferredLocalizations array" "iMemScan/Info.plist"
            /usr/libexec/PlistBuddy -c "Add :CFBundlePreferredLocalizations:0 string $DEV_LANGUAGE" "iMemScan/Info.plist"
        else
            /usr/libexec/PlistBuddy -c "Delete :CFBundlePreferredLocalizations" "iMemScan/Info.plist"
            /usr/libexec/PlistBuddy -c "Add :CFBundlePreferredLocalizations array" "iMemScan/Info.plist"
            /usr/libexec/PlistBuddy -c "Add :CFBundlePreferredLocalizations:0 string $DEV_LANGUAGE" "iMemScan/Info.plist"
        fi
        
        # 显示修改后的 Info.plist 内容
        echo "修改后的 Info.plist 内容："
        /usr/libexec/PlistBuddy -c "Print" "iMemScan/Info.plist"
        
        # 检查并确保Localizable.strings文件正确
        echo "检查本地化字符串文件..."
        if [ -f "iMemScan/zh-Hans.lproj/Localizable.strings" ]; then
            echo "中文本地化字符串文件存在"
            cat "iMemScan/zh-Hans.lproj/Localizable.strings"
        else
            echo "警告：中文本地化字符串文件不存在！"
        fi
        
        # 设置环境变量
        echo "APP_DISPLAY_NAME=$DISPLAY_NAME" >> $GITHUB_ENV
        echo "DEVELOPMENT_LANGUAGE=$DEV_LANGUAGE" >> $GITHUB_ENV
    
    # 只创建一个修改脚本，避免YAML语法问题
    - name: 创建修改ViewController的脚本
      run: |
        # 创建脚本文件
        echo "#!/bin/bash" > fix_viewcontroller.sh
        echo "# 添加强制使用中文的设置" >> fix_viewcontroller.sh
        echo "# 修改ViewController.swift" >> fix_viewcontroller.sh
        echo "cp iMemScan/ViewController.swift iMemScan/ViewController.swift.bak" >> fix_viewcontroller.sh
        echo "grep -q 'AppleLanguages' iMemScan/ViewController.swift || sed -i '' '/super.viewDidLoad()/ a\\
        \\ \\ \\ \\ \\ \\ \\ \\ // 强制设置语言为中文\\
        \\ \\ \\ \\ \\ \\ \\ \\ UserDefaults.standard.set\\([\\\"zh-Hans\\\"]\\, forKey: \\\"AppleLanguages\\\"\\)\\
        \\ \\ \\ \\ \\ \\ \\ \\ UserDefaults.standard.synchronize\\(\\)\\
        ' iMemScan/ViewController.swift" >> fix_viewcontroller.sh
        echo "chmod +x fix_viewcontroller.sh" >> fix_viewcontroller.sh
        echo "# 脚本创建完成" >> fix_viewcontroller.sh
        
        # 赋予执行权限
        chmod +x fix_viewcontroller.sh
        
        # 执行脚本
        ./fix_viewcontroller.sh
        
        # 显示修改后的文件
        echo "修改后的ViewController.swift内容："
        cat iMemScan/ViewController.swift
    
    - name: 🏭 构建项目
      run: |
        # 创建构建目录
        mkdir -p build/ipa
        
        # 设置环境变量
        export LANGUAGE=${{ env.LANGUAGE }}
        
        # 并行构建配置
        CPU_COUNT=$(sysctl -n hw.ncpu)
        echo "使用 $CPU_COUNT 个CPU核心进行构建"
        
        # 构建项目（使用并行编译），增加语言相关参数
        xcodebuild -project iMemScan.xcodeproj \
                  -scheme $SCHEME \
                  -configuration $CONFIGURATION \
                  -destination "$DESTINATION" \
                  -archivePath $PWD/build/iMemScan.xcarchive \
                  -parallelizeTargets \
                  -jobs $CPU_COUNT \
                  -quiet \
                  clean archive \
                  CODE_SIGNING_ALLOWED=NO \
                  CODE_SIGNING_REQUIRED=NO \
                  CODE_SIGN_IDENTITY="" \
                  PROVISIONING_PROFILE="" \
                  PROVISIONING_PROFILE_SPECIFIER="" \
                  DEVELOPMENT_TEAM="" \
                  PRODUCT_BUNDLE_IDENTIFIER="com.imemscan.app.$LANGUAGE" \
                  PRODUCT_BUNDLE_DISPLAY_NAME="${{ env.APP_DISPLAY_NAME }}" \
                  INFOPLIST_KEY_CFBundleDisplayName="${{ env.APP_DISPLAY_NAME }}" \
                  DEVELOPMENT_LANGUAGE="${{ env.DEVELOPMENT_LANGUAGE }}" \
                  -UseModernBuildSystem=YES \
                  -clonedSourcePackagesDirPath "$PWD/build/cloned_source_packages"
        
        # 手动创建Payload目录并复制.app文件
        mkdir -p build/ipa/Payload
        cp -r build/iMemScan.xcarchive/Products/Applications/*.app build/ipa/Payload/
        
        # 检查并修改应用中的Info.plist
        APP_INFO_PLIST="build/ipa/Payload/iMemScan.app/Info.plist"
        if [ -f "$APP_INFO_PLIST" ]; then
            echo "修改应用包中的Info.plist..."
            /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName 内存扫描" "$APP_INFO_PLIST"
            /usr/libexec/PlistBuddy -c "Set :CFBundleDevelopmentRegion zh-Hans" "$APP_INFO_PLIST"
            
            # 确保有正确的本地化设置
            if ! /usr/libexec/PlistBuddy -c "Print :CFBundleLocalizations" "$APP_INFO_PLIST" &>/dev/null; then
                /usr/libexec/PlistBuddy -c "Add :CFBundleLocalizations array" "$APP_INFO_PLIST"
                /usr/libexec/PlistBuddy -c "Add :CFBundleLocalizations:0 string zh-Hans" "$APP_INFO_PLIST"
            else
                # 清除现有本地化设置并重新添加中文
                /usr/libexec/PlistBuddy -c "Delete :CFBundleLocalizations" "$APP_INFO_PLIST"
                /usr/libexec/PlistBuddy -c "Add :CFBundleLocalizations array" "$APP_INFO_PLIST"
                /usr/libexec/PlistBuddy -c "Add :CFBundleLocalizations:0 string zh-Hans" "$APP_INFO_PLIST"
            fi
            
            # 添加首选语言
            if ! /usr/libexec/PlistBuddy -c "Print :CFBundlePrimaryLanguage" "$APP_INFO_PLIST" &>/dev/null; then
                /usr/libexec/PlistBuddy -c "Add :CFBundlePrimaryLanguage string zh-Hans" "$APP_INFO_PLIST"
            else
                /usr/libexec/PlistBuddy -c "Set :CFBundlePrimaryLanguage zh-Hans" "$APP_INFO_PLIST"
            fi
            
            # 添加AppleLanguages设置
            if ! /usr/libexec/PlistBuddy -c "Print :AppleLanguages" "$APP_INFO_PLIST" &>/dev/null; then
                /usr/libexec/PlistBuddy -c "Add :AppleLanguages array" "$APP_INFO_PLIST"
                /usr/libexec/PlistBuddy -c "Add :AppleLanguages:0 string zh-Hans" "$APP_INFO_PLIST"
            else
                /usr/libexec/PlistBuddy -c "Delete :AppleLanguages" "$APP_INFO_PLIST"
                /usr/libexec/PlistBuddy -c "Add :AppleLanguages array" "$APP_INFO_PLIST"
                /usr/libexec/PlistBuddy -c "Add :AppleLanguages:0 string zh-Hans" "$APP_INFO_PLIST"
            fi
            
            # 设置默认语言偏好
            if ! /usr/libexec/PlistBuddy -c "Print :CFBundlePreferredLocalizations" "$APP_INFO_PLIST" &>/dev/null; then
                /usr/libexec/PlistBuddy -c "Add :CFBundlePreferredLocalizations array" "$APP_INFO_PLIST"
                /usr/libexec/PlistBuddy -c "Add :CFBundlePreferredLocalizations:0 string zh-Hans" "$APP_INFO_PLIST"
            else
                /usr/libexec/PlistBuddy -c "Delete :CFBundlePreferredLocalizations" "$APP_INFO_PLIST"
                /usr/libexec/PlistBuddy -c "Add :CFBundlePreferredLocalizations array" "$APP_INFO_PLIST"
                /usr/libexec/PlistBuddy -c "Add :CFBundlePreferredLocalizations:0 string zh-Hans" "$APP_INFO_PLIST"
            fi
            
            echo "修改后的应用Info.plist内容："
            /usr/libexec/PlistBuddy -c "Print" "$APP_INFO_PLIST"
        else
            echo "警告：无法找到应用包中的Info.plist"
        fi
        
        # 复制本地化文件到最终的应用包中
        mkdir -p "build/ipa/Payload/iMemScan.app/zh-Hans.lproj"
        cp -f "iMemScan/zh-Hans.lproj/Localizable.strings" "build/ipa/Payload/iMemScan.app/zh-Hans.lproj/"
        echo "已复制本地化文件到应用包"
        
        # 确保ldid可用并签名应用
        which ldid
        ldid -Sentitlements.plist build/ipa/Payload/*.app/iMemScan
        
        # 创建带日期和语言后缀的文件名
        BUILD_DATE=$(date +'%Y%m%d')
        BUILD_TIME=$(date +'%H%M%S')
        
        # 创建最终版本号
        FINAL_VERSION="${BUILD_DATE}"
        
        # 创建IPA和TIPA文件
        cd build/ipa
        zip -r "../iMemScanTS.ipa" .
        cd ../..
        
        # 复制为.tipa文件
        cp build/iMemScanTS.ipa build/iMemScanTS.tipa
        
        # 设置IPA路径环境变量
        IPA_FILENAME="iMemScanTS.tipa"
        echo "IPA_PATH=build/${IPA_FILENAME}" >> $GITHUB_ENV
        echo "IPA_FILENAME=${IPA_FILENAME}" >> $GITHUB_ENV
        echo "FINAL_VERSION=${FINAL_VERSION}" >> $GITHUB_ENV
        echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_ENV
        echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV
        
        echo "LANGUAGE=${{ env.LANGUAGE }}" >> $GITHUB_ENV
    
    - name: ⬆️ 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: tipa-builds
        path: build/iMemScanTS.tipa
        retention-days: 3  # 缩短保留时间，减少存储使用
        compression-level: 9  # 最高压缩率
    
    - name: 设置输出变量
      id: set_outputs
      run: |
        echo "final_version=$FINAL_VERSION" >> $GITHUB_OUTPUT
        echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
        echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
    
    - name: 🚀 创建Release并上传TIPA
      id: create_release
      # 添加超时设置
      timeout-minutes: 30
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name || format('v{0}', steps.set_outputs.outputs.build_date) }}
        name: iMemScan ${{ steps.set_outputs.outputs.build_date }} 简体中文版
        files: build/iMemScanTS.tipa
        body: |
          # iMemScan ${{ steps.set_outputs.outputs.build_date }} 简体中文版
          
          ### 构建信息
          - 构建时间: ${{ steps.set_outputs.outputs.build_date }} ${{ steps.set_outputs.outputs.build_time }}
          - 版本: ${{ steps.set_outputs.outputs.build_date }}
          - 自动构建的TrollStore安装包
          
          ### 使用说明
          1. 下载iMemScanTS.tipa文件
          2. 使用TrollStore安装
          3. 确保设备语言设置为简体中文以获得最佳体验
        draft: false
        prerelease: false
        generate_release_notes: true
